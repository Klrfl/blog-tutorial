---
import MyLayout from "../layouts/MyLayout.astro";
import BlogPost from "../components/BlogPost.astro";
import CategoryLink from "../components/CategoryLink.astro";
import { sortPostsByDate } from "../scripts/utils";

const allPosts = await Astro.glob("../pages/posts/*.md");
const sortedPosts = sortPostsByDate(allPosts);

const allTags = [
  ...new Set(allPosts.map((post) => post.frontmatter.tags).flat()),
];
---

<MyLayout title="Home">
  <script
    slot="script"
    src="https://identity.netlify.com/v1/netlify-identity-widget.js"></script>

  <div class="main-grid">
    <main>
      <section class="main-section">
        <h1>Klrfl's Blog</h1>
        <p>I want to learn Astro, that's why I made this blog.</p>
        <p>
          Soo, I got bored of learning Vue and reading about stuff regarding
          front-end web development. Long story short, I heard of Astro and I
          want to be able to make blogs. So, here we are.
        </p>
      </section>

      <section class="main-section blogs">
        <h2>My recent blogs</h2>

        <ul class="blog-list">
          {sortedPosts.map((post) => <BlogPost post={post} />)}
        </ul>

        <a href="/latest">See more of my blogs</a>
      </section>
    </main>

    <aside>
      <h2>Tags</h2>
      <ul class="tag-list">
        {allTags.map((tag) => <CategoryLink tag={tag} />)}
      </ul>
    </aside>
  </div>

  <script>
    if (window.netlifyIdentity) {
      window.netlifyIdentity.on("init", (user) => {
        if (!user) {
          window.netlifyIdentity.on("login", () => {
            document.location.href = "/admin/";
          });
        }
      });
    }
  </script>
</MyLayout>

<style>
  .main-grid {
    display: grid;
    grid-template-areas:
      "main"
      "aside";
  }

  main,
  aside {
    padding: 2rem;
  }

  main {
    grid-area: main;
    max-width: 120ch;
  }
  aside {
    grid-area: aside;
  }
  .tag-list {
    list-style: none;
    margin: 0;
    padding: 0;
  }

  @media screen and (min-width: 50em) {
    .main-grid {
      grid-template-areas: "main main main main main main main main aside aside aside aside";
      grid-template-columns: repeat(12, 1fr);
    }
  }
</style>
