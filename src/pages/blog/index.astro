---
import MyLayout from "@layouts/MyLayout.astro";
import BlogPost from "@components/BlogPost.astro";

import CTA from "@components/CTA.astro";
import CategoryLink from "@components/CategoryLink.astro";
import Footer from "@components/Footer.astro";

import { sortPostsByDate } from "@/scripts/utils";
import { getCollection } from "astro:content";

const title = "Efraim Munthe | Blog";

const allPosts = await getCollection("blog");
const sortedPosts = sortPostsByDate(allPosts);

const allTags = allPosts.map((post) => post.data.tags).flat();

const processedTags = allTags.reduce((acc, tag) => {
  const value = acc[tag] || 0;

  return {
    ...acc,
    [tag]: value + 1,
  };
}, {});
---

<MyLayout title={title} description="Efraim blog">
  <script
    slot="script"
    src="https://identity.netlify.com/v1/netlify-identity-widget.js"></script>

  <main class="main-grid">
    <header>
      <h1>Efraim's Blog</h1>
      <p>I want to learn Astro, that's why I made this blog.</p>
      <p>
        Soo, I got bored of learning Vue and reading about stuff regarding
        front-end web development. Long story short, I heard of Astro and I want
        to be able to make blogs. So, here we are.
      </p>
    </header>

    <section class="main-section blogs">
      <h2>My recent blogs</h2>

      <ul class="blog-list">
        {sortedPosts.map((post) => <BlogPost post={post} />)}
      </ul>

      <CTA href="/latest" margin>See more of my blogs</CTA>
    </section>

    <aside>
      <h2>Tags</h2>
      <ul class="tag-list">
        {
          // Object.entries returns an array
          Object.entries(processedTags).map(([tag, amount]) => (
            <CategoryLink {tag} {amount} />
          ))
        }
      </ul>
    </aside>
  </main>

  <Footer />
</MyLayout>

<style>
  .main-grid {
    display: grid;
    gap: 1rem;

    --column-count: 6;
    grid-template-columns:
      minmax(1rem, 1fr)
      [content-start]
      repeat(var(--column-count), minmax(0, 10rem))
      [content-end]
      minmax(1rem, 1fr);
  }

  header {
    grid-column: content-start / content-end;
  }

  .blogs {
    max-width: 120ch;
    grid-column: content-start / 6;
  }

  aside {
    grid-column: 6 / content-end;
  }

  @media screen and (width <= 50em) {
    .main-grid {
      grid-template-columns:
        [gutter-start] 1rem
        [content-start] 1fr [content-end] 1rem [gutter-end];
      gap: 0;
    }

    .blogs,
    aside {
      grid-column: content-start / content-end;
    }
  }

  .tag-list {
    list-style: none;
    margin: 0;
    padding: 0;
  }
</style>
